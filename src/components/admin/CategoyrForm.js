// src/components/admin/CategoryForm.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image'; // Bu import'u dosyanın başına ekleyin
import { 
  collection, 
  addDoc, 
  updateDoc, 
  getDoc, 
  query, 
  where, 
  getDocs,
  doc, 
  serverTimestamp 
} from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../../lib/firebase';
import { FiImage, FiAlertCircle, FiCheck, FiX } from 'react-icons/fi';

// URL-safe slug oluşturma fonksiyonu
function slugify(text) {
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/[\s_]+/g, '-')       // Boşlukları ve alt çizgileri kaldır
    .replace(/[^\w\-]+/g, '')      // Alfanümerik olmayan karakterleri kaldır
    .replace(/\-\-+/g, '-')        // Birden fazla tire varsa tek tireye indirge
    .replace(/^-+/, '')            // Baştaki tireleri kaldır
    .replace(/-+$/, '');           // Sondaki tireleri kaldır
}

export default function CategoryForm({ categoryId }) {
  const router = useRouter();
  
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  
  // Form alanları
  const [name, setName] = useState('');
  const [slug, setSlug] = useState('');
  const [description, setDescription] = useState('');
  const [image, setImage] = useState('');
  const [imageFile, setImageFile] = useState(null);
  
  // Slug otomatik oluşturuldu mu?
  const [slugAutoGenerated, setSlugAutoGenerated] = useState(true);
  
  // Düzenleme modunda ise, kategori verilerini al
  useEffect(() => {
    const fetchCategory = async () => {
      if (!categoryId) {
        setLoading(false);
        return;
      }
      
      try {
        const categoryDoc = await getDoc(doc(db, 'categories', categoryId));
        
        if (!categoryDoc.exists()) {
          setError('Kategori bulunamadı.');
          setLoading(false);
          return;
        }
        
        const categoryData = categoryDoc.data();
        
        setName(categoryData.name || '');
        setSlug(categoryData.slug || '');
        setDescription(categoryData.description || '');
        setImage(categoryData.image || '');
        
        // Slug manuel olarak düzenlenmiş mi?
        setSlugAutoGenerated(false);
        
        setLoading(false);
      } catch (error) {
        console.error('Kategori verileri alınırken hata oluştu:', error);
        setError('Kategori yüklenirken bir hata oluştu.');
        setLoading(false);
      }
    };
    
    fetchCategory();
  }, [categoryId]);
  
  // İsim değişince otomatik slug oluştur
  useEffect(() => {
    if (name && slugAutoGenerated) {
      setSlug(slugify(name));
    }
  }, [name, slugAutoGenerated]);
  
  // Slug değişince, otomatik oluşturma modunu kapat
  const handleSlugChange = (e) => {
    setSlug(e.target.value);
    setSlugAutoGenerated(false);
  };
  
  // Görseli yükle
  const handleImageUpload = async (file) => {
    if (!file) return null;
    
    try {
      const storageRef = ref(storage, `category-images/${Date.now()}_${file.name}`);
      await uploadBytes(storageRef, file);
      const downloadURL = await getDownloadURL(storageRef);
      return downloadURL;
    } catch (error) {
      console.error('Görsel yüklenirken hata oluştu:', error);
      throw error;
    }
  };
  
  // Kategori görseli seçme
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    setImageFile(file);
    
    // Görsel ön izleme
    const reader = new FileReader();
    reader.onload = () => {
      setImage(reader.result);
    };
    reader.readAsDataURL(file);
  };
  
  // Slug kontrolü (benzersiz olmalı)
  const checkSlugExists = async (slugToCheck) => {
    try {
      const slugQuery = query(
        collection(db, 'categories'),
        where('slug', '==', slugToCheck)
      );
      
      const querySnapshot = await getDocs(slugQuery);
      
      // Aynı slug'a sahip başka kategori varsa ve bu düzenleme işlemi değilse
      if (!querySnapshot.empty) {
        // Düzenleme işleminde, eğer bulunan belge aynı kategori ise sorun yok
        if (categoryId && querySnapshot.docs[0].id === categoryId) {
          return false;
        }
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Slug kontrolü sırasında hata oluştu:', error);
      throw error;
    }
  };
  
  // Formu gönderme
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!name || !slug) {
      setError('İsim ve slug alanları zorunludur.');
      return;
    }
    
    try {
      setSubmitting(true);
      setError(null);
      
      // Slug kontrolü
      const slugExists = await checkSlugExists(slug);
      
      if (slugExists) {
        setError(`"${slug}" slug'ı zaten kullanımda. Lütfen başka bir slug girin.`);
        setSubmitting(false);
        return;
      }
      
      // Yüklenen görsel varsa, Storage'a yükle
      let imageURL = image;
      if (imageFile) {
        imageURL = await handleImageUpload(imageFile);
      }
      
      const categoryData = {
        name,
        slug,
        description,
        image: imageURL,
        updatedAt: serverTimestamp()
      };
      
      if (categoryId) {
        // Mevcut kategoriyi güncelle
        await updateDoc(doc(db, 'categories', categoryId), categoryData);
      } else {
        // Yeni kategori oluştur
        categoryData.createdAt = serverTimestamp();
        
        await addDoc(collection(db, 'categories'), categoryData);
      }
      
      setSuccess(true);
      
      // Başarılı işlem sonrası admin paneline yönlendir
      setTimeout(() => {
        router.push('/admin');
      }, 2000);
    } catch (error) {
      console.error('Kategori kaydedilirken hata oluştu:', error);
      setError('Kategori kaydedilirken bir hata oluştu: ' + error.message);
    } finally {
      setSubmitting(false);
    }
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Başarı Mesajı */}
      {success && (
        <div className="bg-green-50 border border-green-200 text-green-800 rounded-md p-4 flex items-center">
          <FiCheck className="text-green-500 mr-2" />
          <p>
            Kategori başarıyla {categoryId ? 'güncellendi' : 'oluşturuldu'}! Yönlendiriliyorsunuz...
          </p>
        </div>
      )}
      
      {/* Hata Mesajı */}
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-800 rounded-md p-4 flex items-center">
          <FiAlertCircle className="text-red-500 mr-2" />
          <p>{error}</p>
        </div>
      )}
      
      {/* İsim */}
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
          Kategori Adı*
        </label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>
      
      {/* Slug */}
      <div>
        <label htmlFor="slug" className="block text-sm font-medium text-gray-700 mb-1">
          Slug*
        </label>
        <input
          type="text"
          id="slug"
          value={slug}
          onChange={handleSlugChange}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
        <p className="mt-1 text-xs text-gray-500">
          {slugAutoGenerated 
            ? 'Slug kategori adından otomatik oluşturuldu. Özelleştirmek için düzenleyin.' 
            : 'Slug manuel olarak düzenlendi.'}
        </p>
      </div>
      
      {/* Açıklama */}
      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
          Açıklama
        </label>
        <textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          rows={3}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          placeholder="Kategori hakkında kısa bir açıklama"
        />
      </div>
      
      {/* Kategori Görseli */}
      <div>
        <label htmlFor="image" className="block text-sm font-medium text-gray-700 mb-1">
          Kategori Görseli
        </label>
        
        <div className="flex items-center space-x-4">
          <label className="block">
            <span className="sr-only">Kategori görseli seç</span>
            <input
              type="file"
              id="image"
              onChange={handleImageChange}
              accept="image/*"
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          </label>
          
          {image && (
            <button
              type="button"
              onClick={() => {
                setImage('');
                setImageFile(null);
              }}
              className="text-red-600 hover:text-red-800"
            >
              <FiX className="text-xl" />
            </button>
          )}
        </div>
        
        {image && (
          <div className="mt-2">
            <Image 
              src={image} 
              alt="Kategori görseli önizleme" 
              width={160}
              height={120}
              className="rounded-md"
              // Sadece yönetici alanında bir önizleme olduğu için öncelik kullanma
              // FileReader'dan gelen data URL'leri için özel işlem gerekir
              unoptimized={image.startsWith('data:')}
            />
          </div>
        )}
      </div>
      
      {/* Gönder Butonu */}
      <div className="flex justify-end">
        <button
          type="submit"
          disabled={submitting || !name || !slug}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-300"
        >
          {submitting ? 'Kaydediliyor...' : categoryId ? 'Güncelle' : 'Oluştur'}
        </button>
      </div>
    </form>
  );
}