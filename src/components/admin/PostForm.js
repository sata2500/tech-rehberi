// src/components/admin/PostForm.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import dynamic from 'next/dynamic';
import Image from 'next/image'; // Bu import'u dosyanın başına ekleyin
import { useAuth } from '../../contexts/AuthContext';
import { 
  collection, 
  addDoc, 
  updateDoc, 
  getDoc, 
  getDocs, 
  query, 
  doc, 
  serverTimestamp 
} from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../../lib/firebase';
import { 
  FiImage, 
  FiAlertCircle,
  FiCheck, 
  FiX 
} from 'react-icons/fi';

// React Quill'i dinamik olarak import et (SSR ile uyumsuzluk sorunlarını önlemek için)
const ReactQuill = dynamic(
  () => import('react-quill'),
  { ssr: false }
);
import 'react-quill/dist/quill.snow.css';

// URL-safe slug oluşturma fonksiyonu
function slugify(text) {
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/[\s_]+/g, '-')       // Boşlukları ve alt çizgileri kaldır
    .replace(/[^\w\-]+/g, '')      // Alfanümerik olmayan karakterleri kaldır
    .replace(/\-\-+/g, '-')        // Birden fazla tire varsa tek tireye indirge
    .replace(/^-+/, '')            // Baştaki tireleri kaldır
    .replace(/-+$/, '');           // Sondaki tireleri kaldır
}

export default function PostForm({ postId }) {
  const { user } = useAuth();
  const router = useRouter();
  
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [categories, setCategories] = useState([]);
  
  // Form alanları
  const [title, setTitle] = useState('');
  const [slug, setSlug] = useState('');
  const [content, setContent] = useState('');
  const [excerpt, setExcerpt] = useState('');
  const [coverImage, setCoverImage] = useState('');
  const [coverImageFile, setCoverImageFile] = useState(null);
  const [categoryId, setCategoryId] = useState('');
  const [tags, setTags] = useState('');
  const [published, setPublished] = useState(false);
  
  // Tag input alanı
  const [tagInput, setTagInput] = useState('');
  const [tagsList, setTagsList] = useState([]);
  
  // Slug otomatik oluşturuldu mu?
  const [slugAutoGenerated, setSlugAutoGenerated] = useState(true);
  
  // Quill editör modülleri
  const modules = {
    toolbar: [
      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
      ['bold', 'italic', 'underline', 'strike', 'blockquote'],
      [{ 'list': 'ordered' }, { 'list': 'bullet' }],
      [{ 'indent': '-1' }, { 'indent': '+1' }],
      ['link', 'image'],
      ['clean'],
      [{ 'color': [] }, { 'background': [] }],
      [{ 'align': [] }]
    ]
  };
  
  // Quill editör formatları
  const formats = [
    'header',
    'bold', 'italic', 'underline', 'strike', 'blockquote',
    'list', 'bullet', 'indent',
    'link', 'image',
    'color', 'background',
    'align'
  ];
  
  // Kategori listesini al
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categoriesQuery = query(collection(db, 'categories'));
        const categoriesSnapshot = await getDocs(categoriesQuery);
        
        const categoriesData = categoriesSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        setCategories(categoriesData);
        
        // Eğer kategori varsa, ilk kategoriyi seç
        if (categoriesData.length > 0 && !categoryId) {
          setCategoryId(categoriesData[0].id);
        }
      } catch (error) {
        console.error('Kategoriler alınırken hata oluştu:', error);
      }
    };
    
    fetchCategories();
  }, [categoryId]);
  
  // Düzenleme modunda ise, yazı verilerini al
  useEffect(() => {
    const fetchPost = async () => {
      if (!postId) {
        setLoading(false);
        return;
      }
      
      try {
        const postDoc = await getDoc(doc(db, 'posts', postId));
        
        if (!postDoc.exists()) {
          setError('Yazı bulunamadı.');
          setLoading(false);
          return;
        }
        
        const postData = postDoc.data();
        
        setTitle(postData.title || '');
        setSlug(postData.slug || '');
        setContent(postData.content || '');
        setExcerpt(postData.excerpt || '');
        setCoverImage(postData.coverImage || '');
        setCategoryId(postData.categoryId || '');
        setTagsList(postData.tags || []);
        setPublished(postData.published || false);
        
        // Slug manuel olarak düzenlenmiş mi?
        setSlugAutoGenerated(false);
        
        setLoading(false);
      } catch (error) {
        console.error('Yazı verileri alınırken hata oluştu:', error);
        setError('Yazı yüklenirken bir hata oluştu.');
        setLoading(false);
      }
    };
    
    fetchPost();
  }, [postId]);
  
  // Başlık değişince otomatik slug oluştur
  useEffect(() => {
    if (title && slugAutoGenerated) {
      setSlug(slugify(title));
    }
  }, [title, slugAutoGenerated]);
  
  // Slug değişince, otomatik oluşturma modunu kapat
  const handleSlugChange = (e) => {
    setSlug(e.target.value);
    setSlugAutoGenerated(false);
  };
  
  // Görseli yükle
  const handleImageUpload = async (file) => {
    if (!file) return null;
    
    try {
      const storageRef = ref(storage, `blog-images/${Date.now()}_${file.name}`);
      await uploadBytes(storageRef, file);
      const downloadURL = await getDownloadURL(storageRef);
      return downloadURL;
    } catch (error) {
      console.error('Görsel yüklenirken hata oluştu:', error);
      throw error;
    }
  };
  
  // Kapak görseli seçme
  const handleCoverImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    setCoverImageFile(file);
    
    // Görsel ön izleme
    const reader = new FileReader();
    reader.onload = () => {
      setCoverImage(reader.result);
    };
    reader.readAsDataURL(file);
  };
  
  // Etiket ekleme
  const addTag = () => {
    const trimmedTag = tagInput.trim();
    
    if (!trimmedTag) return;
    
    if (!tagsList.includes(trimmedTag)) {
      setTagsList([...tagsList, trimmedTag]);
    }
    
    setTagInput('');
  };
  
  // Etiket silme
  const removeTag = (tagToRemove) => {
    setTagsList(tagsList.filter(tag => tag !== tagToRemove));
  };
  
  // Enter tuşuyla etiket ekleme
  const handleTagKeyDown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };
  
  // Formu gönderme
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title || !content) {
      setError('Başlık ve içerik alanları zorunludur.');
      return;
    }
    
    try {
      setSubmitting(true);
      setError(null);
      
      // Yüklenen kapak görseli varsa, Storage'a yükle
      let coverImageURL = coverImage;
      if (coverImageFile) {
        coverImageURL = await handleImageUpload(coverImageFile);
      }
      
      const postData = {
        title,
        slug,
        content,
        excerpt: excerpt || content.substring(0, 150).replace(/<[^>]*>?/gm, '') + '...',
        coverImage: coverImageURL,
        authorId: user.uid,
        categoryId,
        tags: tagsList,
        published,
        updatedAt: serverTimestamp()
      };
      
      if (postId) {
        // Mevcut yazıyı güncelle
        await updateDoc(doc(db, 'posts', postId), postData);
      } else {
        // Yeni yazı oluştur
        postData.createdAt = serverTimestamp();
        postData.viewCount = 0;
        
        await addDoc(collection(db, 'posts'), postData);
      }
      
      setSuccess(true);
      
      // Başarılı işlem sonrası admin paneline yönlendir
      setTimeout(() => {
        router.push('/admin');
      }, 2000);
    } catch (error) {
      console.error('Yazı kaydedilirken hata oluştu:', error);
      setError('Yazı kaydedilirken bir hata oluştu: ' + error.message);
    } finally {
      setSubmitting(false);
    }
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Başarı Mesajı */}
      {success && (
        <div className="bg-green-50 border border-green-200 text-green-800 rounded-md p-4 flex items-center">
          <FiCheck className="text-green-500 mr-2" />
          <p>
            Yazı başarıyla {postId ? 'güncellendi' : 'oluşturuldu'}! Yönlendiriliyorsunuz...
          </p>
        </div>
      )}
      
      {/* Hata Mesajı */}
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-800 rounded-md p-4 flex items-center">
          <FiAlertCircle className="text-red-500 mr-2" />
          <p>{error}</p>
        </div>
      )}
      
      {/* Başlık */}
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
          Başlık*
        </label>
        <input
          type="text"
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>
      
      {/* Slug */}
      <div>
        <label htmlFor="slug" className="block text-sm font-medium text-gray-700 mb-1">
          Slug*
        </label>
        <input
          type="text"
          id="slug"
          value={slug}
          onChange={handleSlugChange}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
        <p className="mt-1 text-xs text-gray-500">
          {slugAutoGenerated 
            ? 'Slug başlıktan otomatik oluşturuldu. Özelleştirmek için düzenleyin.' 
            : 'Slug manuel olarak düzenlendi.'}
        </p>
      </div>
      
      {/* Kapak Görseli */}
      <div>
        <label htmlFor="coverImage" className="block text-sm font-medium text-gray-700 mb-1">
          Kapak Görseli
        </label>
        
        <div className="flex items-center space-x-4">
          <label className="block">
            <span className="sr-only">Kapak görseli seç</span>
            <input
              type="file"
              id="coverImage"
              onChange={handleCoverImageChange}
              accept="image/*"
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          </label>
          
          {coverImage && (
            <button
              type="button"
              onClick={() => {
                setCoverImage('');
                setCoverImageFile(null);
              }}
              className="text-red-600 hover:text-red-800"
            >
              <FiX className="text-xl" />
            </button>
          )}
        </div>
        
        {coverImage && (
          <div className="mt-2">
            <Image 
              src={coverImage} 
              alt="Kapak görseli önizleme" 
              width={160}
              height={120}
              className="rounded-md"
              // FileReader'dan gelen data URL'leri için unoptimized ayarlanmalı
              unoptimized={coverImage.startsWith('data:')}
            />
          </div>
        )}
      </div>
      
      {/* Kategori */}
      <div>
        <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
          Kategori*
        </label>
        
        {categories.length > 0 ? (
          <select
            id="category"
            value={categoryId}
            onChange={(e) => setCategoryId(e.target.value)}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            required
          >
            {categories.map(category => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
        ) : (
          <p className="text-red-600">
            Henüz hiç kategori bulunmuyor. Lütfen önce bir kategori ekleyin.
          </p>
        )}
      </div>
      
      {/* Etiketler */}
      <div>
        <label htmlFor="tags" className="block text-sm font-medium text-gray-700 mb-1">
          Etiketler
        </label>
        
        <div className="flex items-center">
          <input
            type="text"
            id="tags"
            value={tagInput}
            onChange={(e) => setTagInput(e.target.value)}
            onKeyDown={handleTagKeyDown}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            placeholder="Eklemek için Enter'a basın"
          />
          
          <button
            type="button"
            onClick={addTag}
            className="ml-2 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Ekle
          </button>
        </div>
        
        {tagsList.length > 0 && (
          <div className="mt-2 flex flex-wrap gap-2">
            {tagsList.map((tag, index) => (
              <div
                key={index}
                className="inline-flex items-center bg-gray-100 text-gray-800 px-3 py-1 rounded-md text-sm"
              >
                {tag}
                <button
                  type="button"
                  onClick={() => removeTag(tag)}
                  className="ml-1 text-gray-500 hover:text-gray-700"
                >
                  <FiX className="text-sm" />
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* İçerik */}
      <div>
        <label htmlFor="content" className="block text-sm font-medium text-gray-700 mb-1">
          İçerik*
        </label>
        
        <div className="bg-white">
          <ReactQuill
            value={content}
            onChange={setContent}
            modules={modules}
            formats={formats}
            className="h-80 rounded-md"
          />
        </div>
      </div>
      
      {/* Özet */}
      <div>
        <label htmlFor="excerpt" className="block text-sm font-medium text-gray-700 mb-1">
          Özet (Seçimlik)
        </label>
        <textarea
          id="excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
          rows={3}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          placeholder="Yazınız için kısa bir özet. Boş bırakırsanız içerikten otomatik oluşturulacaktır."
        />
      </div>
      
      {/* Yayın Durumu */}
      <div className="flex items-center">
        <input
          type="checkbox"
          id="published"
          checked={published}
          onChange={(e) => setPublished(e.target.checked)}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="published" className="ml-2 block text-sm text-gray-700">
          Yayınla
        </label>
      </div>
      
      {/* Gönder Butonu */}
      <div className="flex justify-end">
        <button
          type="submit"
          disabled={submitting || !title || !content || !categoryId}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-300"
        >
          {submitting ? 'Kaydediliyor...' : postId ? 'Güncelle' : 'Oluştur'}
        </button>
      </div>
    </form>
  );
}